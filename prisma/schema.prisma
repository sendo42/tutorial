// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider       = "zod-prisma-types"
  useMultipleFiles                 = true // default is false
  writeBarrelFiles                 = false // default is true
  createInputTypes                 = false // default is true
  createOptionalDefaultValuesTypes = true // default is false
  createPartialTypes               = true // default is false

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  /// @zod.string.email().max(255)
  email String  @unique @db.VarChar(255)
  /// @zod.string.min(1).max(30).regex(/[a-zA-z]/, {message: "Name must contain only letters."}).regex(/[0-9]/, {message: "Name must contain at least one number."})
  password String
  /// @zod.string.min(1).max(30)
  name  String
  imageUrl String? @map("image_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Products Product[]

  @@index([email])
  @@map("users")
}

model Product {
  id    Int     @id @default(autoincrement())
  /// @zod.string.min(1).max(100)
  title String  @db.VarChar(100)
  /// @zod.string.min(1).max(4000)
  description String @db.VarChar(4000)
  /// @zod.number.min(1)
  price Int
  /// @zod.number.min(0)
  stock Int
  imageUrl String? @map("image_url")
  userId Int @map("user_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@map("products")
}

// model Post {
//   id        Int     @id @default(autoincrement())
//   title     String
//   content   String?
//   published Boolean @default(false)
//   authorId  Int
//   author    User    @relation(fields: [authorId], references: [id])
// }